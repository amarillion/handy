{
	"root": true,
	"extends": [
		"eslint:recommended",
		"plugin:@stylistic/recommended-extends",
		"plugin:@typescript-eslint/recommended",
		"plugin:vue/vue3-recommended"
	],
	"parserOptions": {
		"parser": "@typescript-eslint/parser"
	},
	"plugins": [ "@stylistic" ],
	"env": {
		"node": true
	},
	"rules": {
		"eqeqeq": [ "error", "always" ], // Require the use of === and !==.
		"camelcase": [ "error" ], // Enforce camelcase naming convention.
		"no-shadow": [ "error" ], // Eliminate shadowed variable declarations.
		"no-empty-function": [ "error" ], // Disallow empty functions.
		"@stylistic/comma-dangle": [ "error", "always-multiline" ], // Require trailing commas for arrays, objects, imports, exports and functions.
		"@stylistic/indent": [ "error", "tab" ], // Define consistent indentation style.
		"@stylistic/indent-binary-ops": ["error", "tab"], // Define consistent indentation for binary operators in multiline expressions. 
		"@stylistic/no-tabs": [ "error", { "allowIndentationTabs": true } ], // Allow tabs only for indentation.
		"@stylistic/array-bracket-spacing": [ "error", "always" ], // Require spaces between array brackets and other tokens.
		"@stylistic/semi": [ "error", "always" ], // Require semicolons at the end of each statement.
		"@stylistic/arrow-parens": [ "error", "as-needed", { "requireForBlockBody": false } ], // Allow arrow functions to omit parentheses when they have exactly one parameter.
		"@stylistic/no-trailing-spaces": [ "error", { "skipBlankLines": true } ], // Allow blank lines.
		"@stylistic/member-delimiter-style": [ "error", { "multiline": { "delimiter": "comma", "requireLast": true }, "singleline": { "delimiter": "comma" } } ] // Require delimitation using comma. 
	},
	"overrides": [
		{
			"files": [ "**/*.vue" ],
			"extends": [ "plugin:eslint-plugin-vue/vue3-recommended" ],
			"rules": {
				"vue/html-indent": [ "error", "tab", { "baseIndent": 1 } ], // Enforce tabs for <template> inside .vue files.
				"vue/html-self-closing": [ "warn", { "html": { "normal": "any", "void": "any" } } ] // Disallow self-closing signs.
			}
		}
	]
}
